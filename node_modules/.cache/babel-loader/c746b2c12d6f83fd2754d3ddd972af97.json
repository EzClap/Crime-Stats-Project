{"ast":null,"code":"import _classCallCheck from \"/Users/jackhu/Downloads/crime/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jackhu/Downloads/crime/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jackhu/Downloads/crime/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jackhu/Downloads/crime/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jackhu/Downloads/crime/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jackhu/Downloads/crime/src/chart.js\";\nimport React from \"react\";\nimport { Bar, Line, Pie } from 'react-chartjs-2';\n\nvar Chart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chart, _React$Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      chartData: {// labels: [this.props.data.lga],\n        // datasets: [{\n        //     label: 'LGA',\n        //     data: [this.props.data.total],\n        // // backgroundColor:[],\n        // }]\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var lga = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.props[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var area = _step.value;\n          lga.push(area);\n        } // lga.push(this.props.map((area) => {\n        //     area.lga\n        // }));\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var numbers = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.props[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var number = _step2.value;\n          numbers.push(number);\n        } // numbers.push(this.props.map((area) => {\n        //     area.total\n        // }));\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.setState({\n        chartData: {\n          labels: lga,\n          datasets: [{\n            label: 'LGA',\n            data: numbers // backgroundColor:[],\n\n          }]\n        }\n      });\n    } // componentWillMount() {\n    //     const results = this.props.data;\n    //     this.setState({\n    //         chartData: {\n    //             labels: [results.lga],\n    //             datasets: [{\n    //                 label: 'Lga',\n    //                 data: [results.numbers],\n    //             }]\n    //         }\n    //     })\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"graph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Bar, {\n        data: this.state.chartData,\n        options: {\n          maintainAspectRatio: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chart;\n}(React.Component);\n\nexport { Chart };","map":{"version":3,"sources":["/Users/jackhu/Downloads/crime/src/chart.js"],"names":["React","Bar","Line","Pie","Chart","props","state","chartData","lga","area","push","numbers","number","setState","labels","datasets","label","data","maintainAspectRatio","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,QAA+B,iBAA/B;;IAEMC,K;;;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,CACP;AACA;AACA;AACA;AACA;AACA;AANO;AADF,KAAb;AAFe;AAalB;;;;yCAEmB;AAChB,UAAIC,GAAG,GAAG,EAAV;AADgB;AAAA;AAAA;;AAAA;AAEhB,6BAAiB,KAAKH,KAAtB,8HAA4B;AAAA,cAAnBI,IAAmB;AACxBD,UAAAA,GAAG,CAACE,IAAJ,CAASD,IAAT;AACH,SAJe,CAKhB;AACA;AACA;;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQhB,UAAIE,OAAO,GAAG,EAAd;AARgB;AAAA;AAAA;;AAAA;AAShB,8BAAmB,KAAKN,KAAxB,mIAA8B;AAAA,cAArBO,MAAqB;AAC1BD,UAAAA,OAAO,CAACD,IAAR,CAAaE,MAAb;AACH,SAXe,CAYhB;AACA;AACA;;AAdgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAehB,WAAKC,QAAL,CAAc;AACVN,QAAAA,SAAS,EAAC;AACNO,UAAAA,MAAM,EAAEN,GADF;AAENO,UAAAA,QAAQ,EAAC,CAAC;AACNC,YAAAA,KAAK,EAAE,KADD;AAENC,YAAAA,IAAI,EAACN,OAFC,CAGN;;AAHM,WAAD;AAFH;AADA,OAAd;AAUH,K,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BAES;AACL,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AACI,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWC,SADrB;AAGI,QAAA,OAAO,EAAE;AACLW,UAAAA,mBAAmB,EAAE;AADhB,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAWH;;;;EApEelB,KAAK,CAACmB,S;;AAsE1B,SAASf,KAAT","sourcesContent":["import React from \"react\";\nimport { Bar, Line, Pie } from 'react-chartjs-2';\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chartData: {\n                // labels: [this.props.data.lga],\n                // datasets: [{\n                //     label: 'LGA',\n                //     data: [this.props.data.total],\n                // // backgroundColor:[],\n                // }]\n\n            }\n        }\n    }\n\n    componentWillMount(){\n        let lga = [];\n        for (var area of this.props){\n            lga.push(area);\n        }\n        // lga.push(this.props.map((area) => {\n        //     area.lga\n        // }));\n        let numbers = [];\n        for (var number of this.props){\n            numbers.push(number);\n        }\n        // numbers.push(this.props.map((area) => {\n        //     area.total\n        // }));\n        this.setState({\n            chartData:{\n                labels: lga,\n                datasets:[{\n                    label: 'LGA',\n                    data:numbers,\n                    // backgroundColor:[],\n                }]\n            }\n        })\n    }\n\n    // componentWillMount() {\n    //     const results = this.props.data;\n    //     this.setState({\n    //         chartData: {\n    //             labels: [results.lga],\n    //             datasets: [{\n    //                 label: 'Lga',\n    //                 data: [results.numbers],\n    //             }]\n    //         }\n    //     })\n    // }\n\n    render() {\n        return (\n            <div className=\"graph\">\n                <Bar\n                    data={this.state.chartData}\n\n                    options={{\n                        maintainAspectRatio: false\n                    }}\n                />\n            </div>\n        )\n    }\n}\nexport { Chart }"]},"metadata":{},"sourceType":"module"}